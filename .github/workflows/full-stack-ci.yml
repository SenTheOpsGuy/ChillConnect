name: Full-Stack CI Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '20'

jobs:
  # Parallel testing jobs
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:ci

      - name: Build application
        run: npm run build
        env:
          VITE_API_BASE_URL: http://localhost:5001/api
          VITE_SOCKET_URL: http://localhost:5001
          VITE_NODE_ENV: test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage
            frontend/test-results
          retention-days: 7

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: chillconnect_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/chillconnect_test
          REDIS_URL=redis://localhost:6379
          JWT_SECRET=test-jwt-secret-key-for-testing-only
          ADMIN_CHANGE_PASSWORD=test-admin-password-123
          PORT=5001
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=1000
          EOF

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chillconnect_test

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/coverage
            backend/test-results
          retention-days: 7

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: chillconnect_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Setup backend environment
        working-directory: ./backend
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/chillconnect_e2e
          JWT_SECRET=test-jwt-secret-key-for-e2e-testing
          ADMIN_CHANGE_PASSWORD=test-admin-password-123
          PORT=5001
          FRONTEND_URL=http://localhost:3000
          EOF

      - name: Setup backend database
        working-directory: ./backend
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chillconnect_e2e

      - name: Start backend server
        working-directory: ./backend
        run: npm start &
        env:
          NODE_ENV: test

      - name: Wait for backend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5001/health; do sleep 2; done'

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Start frontend server
        working-directory: ./frontend
        run: npx serve -s dist -p 3000 &

      - name: Wait for frontend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Install Playwright browsers
        run: npx playwright install chromium firefox webkit

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:5001

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: Upload Playwright trace
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-traces
          path: test-results/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Start static server
        working-directory: ./frontend
        run: |
          npm install -g serve
          serve -s dist -p 3000 &

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci
          retention-days: 7

  # Security Scans
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Code Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, e2e-tests, security-scan]
    if: always()
    
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-test-results'
          merge-multiple: true

      - name: Combine coverage reports
        run: |
          npm install -g nyc
          mkdir -p combined-coverage
          # Combine frontend and backend coverage
          nyc merge frontend/coverage combined-coverage/coverage-frontend.json
          nyc merge backend/coverage combined-coverage/coverage-backend.json

      - name: Upload combined coverage
        uses: codecov/codecov-action@v3
        with:
          directory: combined-coverage
          flags: full-stack
          name: full-stack-coverage

      - name: Check quality thresholds
        run: |
          # Check if critical tests passed
          if [ "${{ needs.frontend-test.result }}" != "success" ] || [ "${{ needs.backend-test.result }}" != "success" ]; then
            echo "❌ Critical tests failed"
            exit 1
          fi
          
          # Check if E2E tests passed (if they ran)
          if [ "${{ needs.e2e-tests.result }}" == "failure" ]; then
            echo "❌ E2E tests failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed"

      - name: Create deployment approval
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const { sha } = context;
            
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: 'success',
              context: 'Quality Gate',
              description: 'All quality checks passed - ready for deployment'
            });

  # Notify results
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, e2e-tests, security-scan, quality-gate]
    if: always()
    
    steps:
      - name: Calculate overall status
        id: status
        run: |
          if [ "${{ needs.quality-gate.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All tests passed! Ready for deployment." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Some tests failed. Check the logs for details." >> $GITHUB_OUTPUT
          fi

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#ci-cd'
          text: |
            **Full-Stack CI Pipeline Results**
            
            ${{ steps.status.outputs.message }}
            
            **Details:**
            - Frontend Tests: ${{ needs.frontend-test.result == 'success' && '✅' || '❌' }}
            - Backend Tests: ${{ needs.backend-test.result == 'success' && '✅' || '❌' }}
            - E2E Tests: ${{ needs.e2e-tests.result == 'success' && '✅' || needs.e2e-tests.result == 'skipped' && '⏭️' || '❌' }}
            - Security Scan: ${{ needs.security-scan.result == 'success' && '✅' || '❌' }}
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}