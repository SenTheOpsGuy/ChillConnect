name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main]
    paths: ['frontend/**', '.github/workflows/frontend-deploy.yml']
  pull_request:
    branches: [main]
    paths: ['frontend/**', '.github/workflows/frontend-deploy.yml']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '20'
  WORKING_DIRECTORY: './frontend'

jobs:
  # Lint and Test Job
  test:
    name: Test & Lint Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:ci
        env:
          CI: true

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ env.WORKING_DIRECTORY }}/coverage
          flags: frontend
          name: frontend-coverage

  # Build Job
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: [staging, production]
        exclude:
          - environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'staging' && 'staging' || 'none' }}
          - environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'production' && 'production' || 'none' }}
          - environment: ${{ github.event_name == 'push' && github.ref != 'refs/heads/main' && 'production' || 'none' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Set environment variables
        run: |
          if [ "${{ matrix.environment }}" = "production" ]; then
            echo "VITE_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}" >> $GITHUB_ENV
            echo "VITE_SOCKET_URL=${{ secrets.PROD_SOCKET_URL }}" >> $GITHUB_ENV
            echo "VITE_NODE_ENV=production" >> $GITHUB_ENV
            echo "NETLIFY_SITE_ID=${{ secrets.PROD_NETLIFY_SITE_ID }}" >> $GITHUB_ENV
          else
            echo "VITE_API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}" >> $GITHUB_ENV
            echo "VITE_SOCKET_URL=${{ secrets.STAGING_SOCKET_URL }}" >> $GITHUB_ENV
            echo "VITE_NODE_ENV=staging" >> $GITHUB_ENV
            echo "NETLIFY_SITE_ID=${{ secrets.STAGING_NETLIFY_SITE_ID }}" >> $GITHUB_ENV
          fi

      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './frontend/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: '${{ env.WORKING_DIRECTORY }}/dist'
          production-branch: main
          production-deploy: ${{ matrix.environment == 'production' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ env.NETLIFY_SITE_ID }}

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ **Frontend deployed successfully!**\n\n**Environment:** ${{ matrix.environment }}\n**Deploy URL:** https://${{ env.NETLIFY_SITE_ID }}.netlify.app\n\n*Deployment triggered by commit ${{ github.sha }}*'
            })

  # Security Scan Job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ env.WORKING_DIRECTORY }}/package.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Notify Job
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          text: |
            ‚úÖ **Frontend Deployment Successful**
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            **Environment:** ${{ github.event.inputs.environment || 'staging' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          text: |
            ‚ùå **Frontend Deployment Failed**
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            **Failed Job:** ${{ needs.test.result == 'failure' && 'Testing' || 'Build' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}