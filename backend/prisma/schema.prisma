generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  role        String   @default("USER") // "USER", "ADMIN", "EMPLOYEE", "SUPER_ADMIN"
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Profile information
  profile     Profile?
  
  // OTP verification
  otps        OTP[]
  
  // User bookings
  bookingsAsSeeker   Booking[] @relation("SeekerBookings")
  bookingsAsProvider Booking[] @relation("ProviderBookings")
  
  // Chat messages
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  
  // Token transactions
  tokenTransactions TokenTransaction[]
  walletBalance     Int @default(0)
  
  @@map("users")
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName   String?
  lastName    String?
  displayName String?
  age         Int?
  phoneNumber String?
  location    String?
  bio         String?
  profilePhoto String?
  
  // Provider-specific fields
  isProvider       Boolean @default(false)
  verificationStatus String @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  services         String? // JSON string of services
  hourlyRate       Int?     // in tokens
  availability     String?  // JSON availability schedule
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("profiles")
}

model OTP {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  type      String   // "EMAIL_VERIFICATION", "PHONE_VERIFICATION", "PASSWORD_RESET"
  expiresAt DateTime
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  
  @@map("otps")
}

model Booking {
  id          String        @id @default(uuid())
  seekerId    String
  providerId  String
  seeker      User          @relation("SeekerBookings", fields: [seekerId], references: [id])
  provider    User          @relation("ProviderBookings", fields: [providerId], references: [id])
  
  serviceType String        // "INCALL", "OUTCALL"
  status      String @default("PENDING") // "PENDING", "CONFIRMED", "IN_PROGRESS", "COMPLETED", "CANCELLED", "DISPUTED"
  
  scheduledAt DateTime
  duration    Int           // in minutes
  location    String?       // for outcall bookings
  
  tokenAmount Int           // tokens to be paid
  escrowHeld  Boolean       @default(false)
  
  // Chat for this booking
  chatId      String?       @unique
  chat        Chat?         @relation(fields: [chatId], references: [id])
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("bookings")
}

model Chat {
  id          String    @id @default(uuid())
  
  // Participants (stored as JSON)
  participantIds String // JSON array of user IDs
  
  // Messages
  messages    Message[]
  
  // Associated booking (optional)
  booking     Booking?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("chats")
}

model Message {
  id         String      @id @default(uuid())
  chatId     String
  chat       Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  senderId   String
  receiverId String
  sender     User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  content    String
  type       String @default("TEXT") // "TEXT", "IMAGE", "FILE", "SYSTEM"
  fileUrl    String?
  
  isRead     Boolean     @default(false)
  readAt     DateTime?
  
  createdAt  DateTime    @default(now())
  
  @@map("messages")
}

model TokenTransaction {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id])
  
  type          String            // "PURCHASE", "PAYMENT", "REFUND", "ESCROW_HOLD", "ESCROW_RELEASE"
  amount        Int               // tokens
  valueInr      Int               // equivalent INR value
  status        String @default("PENDING") // "PENDING", "COMPLETED", "FAILED", "CANCELLED"
  
  // Payment details
  paymentId     String?           // PayPal/Stripe payment ID
  paymentMethod String?           // "paypal", "stripe", etc.
  
  // Booking relation (for escrow)
  bookingId     String?
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  @@map("token_transactions")
}