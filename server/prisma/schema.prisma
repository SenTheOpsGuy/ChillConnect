generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SEEKER
  PROVIDER
  EMPLOYEE
  MANAGER
  ADMIN
  SUPER_ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_REVIEW
}

enum BookingType {
  INCALL
  OUTCALL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum TransactionType {
  PURCHASE
  BOOKING_PAYMENT
  BOOKING_REFUND
  WITHDRAWAL
  ESCROW_HOLD
  ESCROW_RELEASE
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  phone             String?            @unique
  passwordHash      String
  role              UserRole           @default(SEEKER)
  isVerified        Boolean            @default(false)
  verificationStatus VerificationStatus @default(PENDING)
  isActive          Boolean            @default(true)
  lastLogin         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  profile           Profile?
  tokenWallet       TokenWallet?
  seekerBookings    Booking[]          @relation("SeekerBookings")
  providerBookings  Booking[]          @relation("ProviderBookings")
  sentMessages      Message[]          @relation("MessageSender")
  verifications     Verification[]
  assignments       Assignment[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  bio             String?
  location        String?
  profileImageUrl String?
  services        String[]  @default([])
  hourlyRate      Int?      // in tokens
  availability    Json?     // JSON object for availability schedule
  rating          Float?    @default(0)
  reviewCount     Int       @default(0)
  isAgeVerified   Boolean   @default(false)
  documentsUploaded Boolean @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model TokenWallet {
  id              String    @id @default(cuid())
  userId          String    @unique
  balance         Int       @default(0) // in tokens
  escrowBalance   Int       @default(0) // tokens held in escrow
  totalPurchased  Int       @default(0)
  totalSpent      Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@map("token_wallets")
}

model Transaction {
  id              String          @id @default(cuid())
  walletId        String
  type            TransactionType
  amount          Int             // in tokens
  description     String
  paypalOrderId   String?
  bookingId       String?
  status          String          @default("completed")
  metadata        Json?
  createdAt       DateTime        @default(now())

  wallet          TokenWallet     @relation(fields: [walletId], references: [id])
  booking         Booking?        @relation(fields: [bookingId], references: [id])

  @@map("transactions")
}

model Booking {
  id              String        @id @default(cuid())
  seekerId        String
  providerId      String
  type            BookingType
  status          BookingStatus @default(PENDING)
  scheduledAt     DateTime
  duration        Int           // in hours
  tokenAmount     Int
  location        String?
  notes           String?
  employeeId      String?       // assigned employee for monitoring
  completedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  seeker          User          @relation("SeekerBookings", fields: [seekerId], references: [id])
  provider        User          @relation("ProviderBookings", fields: [providerId], references: [id])
  employee        User?         @relation(fields: [employeeId], references: [id])
  messages        Message[]
  transactions    Transaction[]
  assignments     Assignment[]

  @@map("bookings")
}

model Message {
  id              String    @id @default(cuid())
  bookingId       String
  senderId        String
  content         String
  messageType     String    @default("text") // text, image, system
  mediaUrl        String?
  isFlagged       Boolean   @default(false)
  flagReason      String?
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())

  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  sender          User      @relation("MessageSender", fields: [senderId], references: [id])

  @@map("messages")
}

model Verification {
  id              String             @id @default(cuid())
  userId          String
  employeeId      String?
  type            String             // age, identity, provider_documents
  status          VerificationStatus @default(PENDING)
  documentUrls    String[]           @default([])
  notes           String?
  reviewedAt      DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user            User               @relation(fields: [userId], references: [id])
  employee        User?              @relation(fields: [employeeId], references: [id])

  @@map("verifications")
}

model Assignment {
  id              String    @id @default(cuid())
  employeeId      String
  itemId          String    // can be booking ID or verification ID
  itemType        String    // booking, verification
  status          String    @default("active") // active, completed, reassigned
  assignedAt      DateTime  @default(now())
  completedAt     DateTime?

  employee        User      @relation(fields: [employeeId], references: [id])
  booking         Booking?  @relation(fields: [itemId], references: [id])

  @@map("assignments")
}

model AuditLog {
  id              String    @id @default(cuid())
  userId          String?
  action          String
  resource        String
  resourceId      String?
  details         Json?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime  @default(now())

  user            User?     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}